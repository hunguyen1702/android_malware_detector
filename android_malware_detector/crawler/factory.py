import json
import enum
from crawler import APKCrawlerMOB, APKCrawlerAAF


class APKCrawlerName(enum.Enum):
    MOB = "MOB"
    AAF = "AAF"


class APKCrawlerFactory:
    def __init__(self):
        pass

    CRAWLERID = {
        "MOB": APKCrawlerMOB,
        "AAF": APKCrawlerAAF
    }

    @staticmethod
    def start_crawling(config_file, crawler_name="AAF", num_thread=1):
        try:
            configurations = json.load(open(config_file))
            crawler_class = APKCrawlerFactory.CRAWLERID[crawler_name]
            num_page = configurations['NUM_PAGE']
            if configurations.has_key('START_FROM'):
                end = configurations['START_FROM'] - 1
                num_page += end
            else:
                end = 0
            segment = num_page / num_thread
            thread_pool = []
            if segment < 1:
                configurations['RANGE'] = [end + 1, num_page]
                crawler = crawler_class(configurations)
                crawler.start()
                thread_pool.append(crawler)
            else:
                for i in range(num_thread):
                    start = end + 1
                    end = start + segment - 1
                    if end + segment > num_page:
                        end = num_page
                    configurations['RANGE'] = [start, end]
                    crawler = crawler_class(configurations)
                    crawler.start()
                    thread_pool.append(crawler)
            for clr in thread_pool:
                clr.join()
        except KeyError, e:
            print "[ERROR] Wrong config. {}".format(e)
        except Exception, e:
            print "[ERROR] Starting crawler fail. {}".format(e)

    @staticmethod
    def print_available_crawler():
        print '[INFO] AVAILABLE CRAWLER ID:'
        for crawler in APKCrawlerName:
            cid = crawler.value
            print '\t-{}: crawl from {}'.format(cid, APKCrawlerFactory.CRAWLERID[cid].URL)
