import os
import sys
import argparse
import textwrap

import signal

from analyze import APKAnalyze
from model.factory import ModelFactory, ModelID
from crawler.factory import APKCrawlerName, APKCrawlerFactory
from virus_total import del_cur_api_key, save_api_key
from virus_total.retrieve import retrieve
from virus_total.scan import scan


def is_valid_file(p, arg):
    if not os.path.exists(arg):
        p.error("[ERROR] The file {} does not exist!".format(arg))
    return arg


def is_valid_path(path, par):
    if not (os.path.exists(path) and os.path.isdir(path)):
        par.error("[ERROR] The path {} is not valid!".format(path))
    return path


def analyze(arg_dict, par):
    if not arg_dict['APK']:
        if not arg_dict['list']:
            par.error("[ERROR] Too few arguments")
            par.print_help()
        else:
            ModelFactory.print_available_model()
    else:
        APKAnalyze(arg_dict['APK'], arg_dict['ModelID'], arg_dict['temp'])


def virus_total(arg_dict, par):
    if arg_dict['file_path']:
        scan(arg_dict['file_path'])
    if arg_dict['scan_id']:
        retrieve(arg_dict['scan_id'])
    if arg_dict['apikey']:
        save_api_key(arg_dict['apikey'])
    if arg_dict['delkey']:
        del_cur_api_key()


def crawl(arg_dict, par):
    if not arg_dict['ConfigFile']:
        if not arg_dict['list']:
            par.error("[ERROR] Too few arguments")
            par.print_help()
        else:
            APKCrawlerFactory.print_available_crawler()
    else:
        APKCrawlerFactory.start_crawling(arg_dict['ConfigFile'], arg_dict['CrawlerID'], arg_dict['Threads'])


def main():
    def signal_handler(signal, frame):
        print 'You pressed Ctrl+C!'
        sys.exit(0)
    signal.signal(signal.SIGINT, signal_handler)
    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        prog='android_malware_detector',
        description='Crawler, Scanner, Malware Detector for Android Applications.',
        epilog=textwrap.dedent('''\
            Contact me with:
                Email: hunguyen1702@gmail.com
                Github: hunguyen1702.
        ''')
    )
    sub_parsers = parser.add_subparsers(help='List of sub command avaiable.')
    # ML model parser
    analyze_parser = sub_parsers.add_parser('analyze', help='Analyze Apk file with Machine Learning Model.')
    analyze_parser.add_argument('APK', type=lambda x: is_valid_file(parser, x), nargs='?',
                                help='Apk file you want to analyze')
    analyze_parser.add_argument('-l', '--list', action='store_true', dest='list',
                                help='List current avaiable model')
    analyze_parser.add_argument('-t', '--temp', dest='temp', type=lambda x: is_valid_path(x, parser),
                                default='./', help='Temporary directory to extract APK file')
    analyze_parser.add_argument('ModelID', default=ModelID.GBM.value, type=str, nargs='?',
                                help='ID/Name of model use to analyze')
    # Virus total parser
    vt_parser = sub_parsers.add_parser('virustotal', help='Scan or Retrieve result from VirusTotal.'
                                                          'https://www.virustotal.com/.')
    vt_parser.add_argument('-s', '--scan', type=lambda x: is_valid_file(parser, x),
                           help='Scan an APK file with file path.',
                           dest='file_path')
    vt_parser.add_argument('-r', '--retrieve', type=str,
                           help='Retrieve scan result from VirusTotal with specified SCAN_ID.',
                           dest='scan_id')
    vt_parser.add_argument('-k', '--key', type=str, dest='apikey', help='Add API key.')
    vt_parser.add_argument('-d', '--delkey', dest='delkey', action='store_true', help='Delete current API key.')
    # Crawler parser
    cr_parser = sub_parsers.add_parser('crawl', help='Crawl APK apps from different source.',
                                       formatter_class=argparse.RawDescriptionHelpFormatter,
                                       description=textwrap.dedent('''\
                                        Configure crawler with a json file with arguments:
                                            - NUM_PAGE: Number of pages to crawl from APK market website.
                                            - SAVING_DIR: Directory you want to save APKs to.
                                            - START_FROM: The page you want to start crawling.
                                        Example: file example.json
                                        {
                                            "NUM_PAGE": 100,
                                            "SAVING_DIR": "/apk",
                                            "START_FROM": 10
                                        }
                                       '''))
    cr_parser.add_argument('-l', '--list', action='store_true', dest='list',
                           help='List avaiable crawler ID and it\'s source.')
    cr_parser.add_argument('ConfigFile', type=lambda x: is_valid_file(parser, x), nargs='?',
                           help='Configuration file of Crawler.')
    cr_parser.add_argument('CrawlerID', type=str, default=APKCrawlerName.AAF.value,
                           nargs='?', help='ID of crawler.')
    cr_parser.add_argument('Threads', type=int, default=1, nargs='?',
                           help='Number of threads to run crawler.')
    actions = {
        'analyze': analyze,
        'crawl': crawl,
        'virustotal': virus_total
    }
    functions = {
        'analyze': analyze_parser,
        'crawl': cr_parser,
        'virustotal': vt_parser
    }
    if len(sys.argv) == 1:
        parser.print_help()
        sys.exit(-1)
    function = sys.argv[1]
    if function not in actions.keys():
        parser.error("Not support command {}".format(sys.argv[1]))
        parser.print_help()
    else:
        args = vars(parser.parse_args())
        actions[function](args, functions[function])


if __name__ == '__main__':
    main()
