import os

import operator
import xgboost as xgb
from xgboost import DMatrix
from sklearn.externals import joblib
from android_malware_detector.model.model import MLModel


class GBMModel(MLModel):

    name = "Gradient Boosted Tree Model"

    def __init__(self):
        MLModel.__init__(self)

    def predict(self, feature_vector):
        try:
            gbm_path = os.path.dirname(os.path.abspath(__file__))
            feature_path = os.path.join(gbm_path, 'features.pkl')
            model_path = os.path.join(gbm_path, 'model.pkl')
            model_fv = joblib.load(feature_path)
            gbm = joblib.load(model_path)
            importance_features = []
            ifm = gbm.get_fscore()
            ifm = sorted(ifm.iteritems(), key=operator.itemgetter(1), reverse=True)
            ifm = [item[0] for item in ifm]
            for feature in ifm:
                if feature in feature_vector.keys():
                    importance_features.append(feature)
            feature_vector = model_fv.transform(feature_vector)
            feature_vector = xgb.DMatrix(feature_vector, feature_names=model_fv.feature_names_)
            predict_result = gbm.predict(feature_vector)[0]
            return predict_result, importance_features[0:20]
        except Exception, e:
            print '[ERROR] Cannot predict with this feature vector: {}'.format(e)
