import os
import xgboost as xgb
from sklearn.externals import joblib
from preprocess.transform.vector_transform import VectorTransform


class GBMVectorTransform(VectorTransform):

    def __init__(self):
        VectorTransform.__init__(self)

    def transform(self, raw_data):
        feature_path = os.path.dirname(os.path.abspath(__file__))
        feature_path = os.path.join(feature_path, 'features.pkl')
        feature_vector = joblib.load(feature_path)
        feature_dict = {}
        for feature in feature_vector.feature_names_:
            if feature in raw_data:
                feature_dict[feature] = 1
        fv = feature_vector.transform(feature_dict)
        fv = xgb.DMatrix(fv, feature_names=feature_vector.feature_names_)
        return fv
